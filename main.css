/*Todo: make this as easy to understand as the improved on subset of this, found in the styler <style> tag*/

body{
	width:100%;
	margin: 0px;
}

header{
	position: relative; /*This rule overruled to "sticky" by a media query when the screen is tall enough to have it onscreen all the time*/
	top: 0px;
	width: 100%;
	text-align: center;
	background-color: #FFFFFFF1;
}

/* For making the favicon (it still needs some work, so I am leaving this temporary code here)

#btnCodeLogo{
	height: 190px;
	width: 190px;
	font-size: 32pt;
	border-radius: 24px;
}*/


main{
	padding-bottom: 70px;
	width: 98%;
	padding-left: 1%;
	padding-right: 1%;
	background-color: lightGreen;
}

footer{
	position: relative;
	bottom: 0px;
	width: 100%;
	text-align: center;
	background-color:#9EFEFE;
	
}

#codeBtns{
	height: 68px;
    display: flex;
    overflow-x: auto;
    overflow-y: hidden;
    flex-direction: row;
    align-items: flex-start;
    justify-content: flex-start;
}

#codeBtns button{ /*Each button inside the #codeBtns container div*/
	width: min-content;
}

#controlBtns{
	height: 88px;
    display: flex;
    overflow-x: auto;
    overflow-y: hidden;
    flex-direction: row;
    align-items: flex-start;
    justify-content: flex-start;
}

#controlBtns button{ /*Each button inside the #controlBtns container div*/
	height: 86px;
}

#saveStyle{/*Styler save button*/
	width: 100px;
	float: left;
	margin: 2px;
}
button{
	height: 66px;
	/*Todo: min-width without messing btns up*/
	border-radius: 8px;
}

.oddStripe{
	background-color: #9999FF;
}

#btnJS{
	font-size: 1em;
}
.JS{
	background-color: DodgerBlue;
	/*w3C logo colour is #005a9c but I prefer my initial choice personally*/
	color: #000000;
}
.CSS{
	background-image: linear-gradient(to top, green, blue);
	color: white;
}

.CSS.group{
	/*need two background images simultaneously, rather than having the .group rules wipe over the .CSS background rules*/
	background-image:  url("arrow.png"), linear-gradient(to top, green, blue);
	background-repeat: no-repeat, repeat;
	background-position: right, right;
}
.CSS.openGroup{
	/*need two background images simultaneously, rather than having the .openGroup rules wipe over the .CSS background rules*/
	background-image:  url("arrowDwn.png"), linear-gradient(to top, green, blue);
	background-repeat: no-repeat, repeat;
	background-position: right, right;
}

.HTML{
	background-color: #3c790a;
	color: white;
}
@font-face {
    font-family: Flux-Regular;
    src: url("fonts/FluxRegular.otf") format("opentype");
}
#btnpython{
	font-size: 1.2em;
}
.python{
	/*Styling taken from python.org homepage*/
	background: #1c3b56;
	color: #ffd343;
	/*color: #fff*/
	font-size: 1.1em;
	font-family: Flux-Regular, SourceSansProBold, Arial, sans-serif;
}

#btnphp{
	font-style: italic;
}
.php{
	/*Styling taken from php.net homepage*/
	background-color: #7A86B8;
	color: #1f222e;
	font-weight: 700;
}

.CSharp{
	background: linear-gradient(45deg, #189f20 50%, #009404 50%);
	color: #ffffff;
}

#btnEmoji{
	font-size: 1em;
}

.Emoji{
    background-color: #3344ED;
    color: Tomato;
	font-size: 1.75em;
}

.group{
	background-image: url("arrow.png");
	background-repeat: no-repeat;
	background-position: right;
    background-size: 19px;
	padding-right: 19px;
}
.openGroup{
	background-image: url("arrowDwn.png");
	background-repeat: no-repeat;
	background-position: right;
    background-size: 19px;
	padding-right: 19px;
}

#codeTA{
	width: 100%;
	height: 300px;
	-moz-tab-size : 4;
    -o-tab-size : 4;
    tab-size : 4;
	white-space: pre;
	overflow-wrap: normal;
	overflow-x: auto;
	font-family: monospace; /*seems to be the default in most browsers anyway, but for some languages like Python it is very useful to have a monospace font. Haven't specified an exact font because that particular rabbit hole doesn't seem to be very important to the goal of btncode, in fact that might be something cool for users to choose in the styler*/
}

select{
	height: 66px;
}

th, td{
	margin-left: 1px;
	margin-right: 6px;
	border-left: burlywood 2px dashed; /*A nice light brown colour*/
}
th:first-child, td:first-child{
	border-left: none;
}

th:last-child, td:last-child{
	margin-left: 1px;
	margin-right: 1px;
}

tbody tr td{
	border-top: burlywood 2px dashed;
}

/*Javascript is used to apply .hide and .show as appropriate*/
.hide {
	display: none !important;
}
.show {
	display: block;
}

.improvementsText{
	max-height: 50px;
	overflow-y: auto;
	background-color: burlywood;
}

@media only screen and (min-height: 468px) {
	/*Responsive breakpoints are normally done on min-widths, but in this case it is the height that is the main thing we are working around - most of the outer elements have % widths so the design is pretty responsive even before mediaQueries, but we had a specific issue when typing on mobile - when the onscreen keyboard comes in, the viewport is too short to display the header and footer and still have room to see the btns and the textarea at the same time*/
	header{
		position: sticky;
	}
	
	footer{
		position: fixed;
	}
	#codeBtns{
		/*Space for a scrollbar*/
		height: 86px;
	}

}