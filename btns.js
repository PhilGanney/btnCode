/* Todo: possibly store controlBtns too??
var controlBtns = {
	"ChangeLanguage": {
		"btnText": "Change Language",
		"showTrigger": "pageLoad"
	}
}*/


/* Replacement for savedCode, which has a format that does not allow for groups within langs or any other data. It also created some limitations on the button text that are probably not ideal

concept 1: all codeBtns and codeGroupBtns of a lang (including codeBtns only to be shown after clicking a codeGroupBtn) are nested right in the lang with keys that do not need to have meaning within code. Values are always an array [int displayNestLevel, str codeBtn/Group, str displayText, either str insertValue OR [codeBtnKeys]]
opened groups would probably need to have a flag in the data to show that it is open - not sure if groups would need that to begin with and set flag to false or just use lack of flag as false
*/
var savedCodeWithGroupsConcept1 = {
	"General": {
		"langName": "General",
		"Tab": [0, "codeBtn", "Tab", "	"],
		"NewLine": [0, "codeBtn", "New<br/>Line", "\r\n"],
		"Symbols": [0, "group", "@<<br/>>$", ["singleQuote", "doubleQuote", "at", "lessThanSymbol", "moreThanSymbol", "fslashSymbol", "bslashSymbol", "dollarSymbol", "poundSymbol", "euroSymbol", "yenSymbol", "copyrightSymbol"]],
		"singleQuote": [1, "codeBtn", "'", "'"],
		"doubleQuote": [1, "codeBtn", "\"", "\""],
		"at": [1, "codeBtn", "@", "@"],
		"lessThanSymbol": [1, "codeBtn", "<", "<"],
		"moreThanSymbol": [1, "codeBtn", ">", ">"],
		"fslashSymbol": [1, "codeBtn", "/", "/"],
		"bslashSymbol": [1, "codeBtn", "\\", "\\"],
		"dollarSymbol": [1, "codeBtn", "$", "$"],
		"poundSymbol": [1, "codeBtn", "£", "£"],
		"euroSymbol": [1, "codeBtn", "€", "€"],
		"yenSymbol": [1, "codeBtn", "¥", "¥"],
		"copyrightSymbol": [1, "codeBtn", "©", "©"],
	},
	"HTML": {
		"langName": "HTML",
		"BoilerplateTemplatesGrp":[0,"group","Boilerplate & Templates",["BoilerplateBasic", "OneFileBoilerplate", "FreeCodeCamp"]],
		"BoilerplateBasic": [1, "codeBtn", "Minimal Boilerplate", "<!DOCTYPE html>\r\n<html>\r\n	<head>\r\n		<meta charset=\"utf-8\">\r\n		<title>Page Title</title>\r\n	</head>\r\n	<body>\r\n		\r\n	</body>\r\n</html>"],
		"OneFileBoilerplate": [1, "codeBtn", "Minimal + JS & CSS in body", "<!DOCTYPE html>\r\n<html>\r\n	<head>\r\n		<meta charset=\"utf-8\">\r\n		<title>Page Title</title>\r\n	</head>\r\n	<body>\r\n		\r\n		<script>\r\n			\r\n		</script>\r\n		<style>\r\n			\r\n		</style>\r\n	</body>\r\n</html>"],
		"FreeCodeCamp": [1, "codeBtn", "FreeCodeCamp Boilerplate", "<!DOCTYPE html>\r\n<html lang=\"en\">\r\n  <head>\r\n    <meta charset=\"UTF-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\r\n    <title>HTML 5 Boilerplate</title>\r\n    <link rel=\"stylesheet\" href=\"style.css\">\r\n  </head>\r\n  <body>\r\n	<script src=\"index.js\"></script>\r\n  </body>\r\n</html>"],
		"HeadElementsGrp": [0, "group", "Head<br/>Elements", ["Stylesheet", "Script", "Title", "LinkBase", "MetaOther", "MetaCharset", "MetaViewport", "MetaThemeColor", "MetaThemeColorDark", "MetaRobotsNoIndex"]],
		"Title": [1, "codeBtn", "&lt;title&gt; (of the Tab/Page)", "<title>Title</title>"],
		"Stylesheet": [1, "codeBtn", "&lt;link&gt; stylesheet", "<link rel=\"stylesheet\" href=\"main.css\"> </link>"],
		"Script": [1, "codeBtn", "&lt;script&gt; with src=", "<script src=\"btnCodeUi.js\"></script>"],
		"LinkBase": [1, "codeBtn", "&lt;base&gt;(for all links)", "<base href=\"\" target=\"_blank\">"],
		"MetaCharset": [1, "codeBtn", "&lt;meta&gt;<br/>charset", "<meta charset=\"UTF-8\">"],
		"MetaViewport": [1, "codeBtn", "&lt;meta&gt;<br/>viewport", "<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">"],
		"MetaOther": [1, "codeBtn", "&lt;meta&gt; desc,<br/>keywords, author", "<meta name=\"description\" content=\"\">\r\n<meta name=\"keywords\" content=\"HTML, CSS, JavaScript\">\r\n<meta name=\"author\" content=\"Grace Hopper\">"],
		"MetaThemeColor": [1, "codeBtn", "&lt;meta&gt; theme&#8209;color", "<meta name=\"theme-color\" content=\"#4285f4\" />"],
		"MetaRobotsNoIndex": [1, "codeBtn", "&lt;meta&gt; robots noindex", "<meta name=\"robots\" content=\"noindex\">"],
		"MetaThemeColorDark": [1, "codeBtn", "&lt;meta&gt; theme&#8209;color light/dark&nbsp;modes", "<meta name=\"theme-color\" media=\"(prefers-color-scheme: light)\" content=\"cyan\" />\r\n<meta name=\"theme-color\" media=\"(prefers-color-scheme: dark)\" content=\"black\" />"],
		"LayoutGrp": [0, "group", "Layout", ["Header", "MainElem", "Footer", "Div", "Span"]],
		"Header": [1, "codeBtn", "&lt;header&gt;", "<header>\r\n	\r\n</header>"],
		"MainElem": [1, "codeBtn", "&lt;main&gt;", "<main>\r\n	\r\n</main>"],
		"Footer": [1, "codeBtn", "&lt;footer&gt;", "<footer>\r\n	\r\n</footer>"],
		"Div": [1, "codeBtn", "&lt;div&gt;", "<div>\r\n	\r\n</div>"],
		"Span": [1, "codeBtn", "&lt;span&gt;", "<span></span>"],
		"TextGrp": [0, "group", "Text", ["Heading1","Heading2","Heading3","Heading6","Paragraph"]],
		"Heading1": [1, "codeBtn", "&lt;h1&gt;", "<h1>Heading</h1>\r\n"],
		"Heading2": [1, "codeBtn", "&lt;h2&gt;", "<h2>Heading</h2>\r\n"],
		"Heading3": [1, "codeBtn", "&lt;h3&gt;", "<h3>Heading</h3>\r\n"],
		"Heading6": [1, "codeBtn", "&lt;h6&gt;", "<h6>Heading</h6>\r\n"],
		"Paragraph": [1, "codeBtn", "\r\n&lt;p&gt;", "<p>text</p>\r\n"],
		"LinksGrp": [0, "group", "Links", ["Link", "LinkNewTab", "ImageLink"]],
		"Link": [1, "codeBtn", "&lt;a&gt; (regular link)", "<a href=\"\">visible text</a>"],
		"LinkNewTab": [1, "codeBtn", "&lt;a&nbsp;_blank&gt; (link new tab)", "<a href=\"url\" target=\"_blank\">link text</a>"],
		"ImageLink": [1, "codeBtn", "(image link)", "<a href=\"\"><img border=\"0\" alt=\"\" src=\"\" width=\"100\" height=\"100\"></a>"],
		"FormsUIGrp": [0, "group", "Forms & UI", ["Label","Input", "Datalist", "Button", "Select", "Option", "OptionSelected"]],
		"Label": [1, "codeBtn", "&lt;label&gt;", "<label for=\"controlID\">Label text here</label>"],
		"Input": [1, "codeBtn", "&lt;input&gt; type=\"text\"", "<input type=\"text\" id=\"\" name=\"\"/>"],
		"Datalist":[1,"codeBtn","&lt;datalist&gt; ","<datalist id=\"\">\r\n	<option value=\"val1\"></option>\r\n	<option value=\"val2\"></option>\r\n</datalist>"],
		"Button": [1, "codeBtn", "&lt;button&gt;", "<button id=\"\">Text</button>"],
		"Select": [1, "codeBtn", "&lt;select&gt;", "<select id=\"\">\r\n	\r\n</select>"],
		"Option": [1, "codeBtn", "&lt;option&gt;", "<option></option>\r\n"],
		"OptionSelected": [1, "codeBtn", "&lt;option selected&gt;", "<option selected></option>\r\n"],
		"ImagesGrp":[0,"group","Images &<br/>Graphics",["img", "CanvasTag", "CanvasRect"]],
		"img":[1,"codeBtn","&lt;img&gt;","<img src=\"filepath\" alt=\"Text to show, if cannot show image\">"],
		"CanvasTag":[1,"codeBtn","&lt;canvas&gt;","<canvas id=\"myCanvas\">Your browser does not support the canvas tag.</canvas>\r\n<script>\r\n</script>"],
		"CanvasRect":[1,"codeBtn","&lt;canvas&gt; (with rectangle)","<canvas id=\"myCanvas\">Your browser does not support the canvas tag.</canvas>\r\n<script>\r\n var c = document.getElementById(\"myCanvas\");\r\n var ctx = c.getContext(\"2d\");\r\n ctx.fillStyle = \"#23FF23\";\r\n ctx.fillRect(0, 34, 80, 100);\r\n</script>"],
		"ProgrammingGrp":[0,"group","Programming",["HtmlComment","ScriptTag", "NoscriptTag", "NoscriptBrowserWarn"]],
		"ScriptTag":[1,"codeBtn","&lt;script&gt;","<script>\r\n</script>"],
		"NoscriptTag":[1,"codeBtn","&lt;noscript&gt; (tag only)","<noscript></noscript>"],
		"NoscriptBrowserWarn":[1,"codeBtn","&lt;noscript&gt; (scripts needed text)","<noscript>Looks like scripts are disabled, some functionality will not be able to work</noscript>"],
		"HtmlComment":[1,"codeBtn","&lt;!-- html comment --&gt;","<!-- comment -->"],
		"TableGrp":[0,"group","Tables",["Table"]],
		"Table":[1,"codeBtn","&lt;table&gt;","<table>\r\n\t<tr>\r\n\t\t<th>header1</th>\r\n\t\t<th>header2</th>\r\n\t\t<th>header3</th>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>row1 col1</td>\r\n\t\t<td>row1 col2</td>\r\n\t\t<td>row1 col3</td>\r\n\t</tr>\r\n\t<tr>\r\n\t\t<td>row2 col1</td>\r\n\t\t<td>row2 col2</td>\r\n\t\t<td>row2 col3</td> \r\n\t</tr>\r\n\t\r\n</table>"],
		"AttributesGrp": [0, "group", "Attributes", ["id", "class", "value", "onclick", "onchange", "placeholder", "List", "LangEnGB"]],
		"id": [1, "codeBtn", "id=", "id=\"\""],
		"class": [1, "codeBtn", "class=", "class=\"\""],
		"value": [1, "codeBtn", "value=", "value=\"\""],
		"onclick": [1, "codeBtn", "onclick=", "onclick=\"\""],		
		"onchange":[1,"codeBtn","onchange=","onchange=\"\""],
		"placeholder": [1, "codeBtn", "placeholder=", "placeholder=\"\""],	
		"List":[1,"codeBtn","list=","list=\"\""],
		"LangEnGB":[1,"codeBtn","lang= en&#8209;GB","lang=\"en-GB\""],
		"HtmlEntitiesGrp": [0, "group", "HTML<br/>Entities", ["nonBreakingSpace", "nonBreakingHyphen","lessThanEntity", "greaterThanEntity"]],
		"nonBreakingSpace": [1, "codeBtn", "non-breaking space", "&nbsp;"],
		"nonBreakingHyphen": [1, "codeBtn", "non&#8209;breaking hyphen", "&#8209;"],
		"lessThanEntity": [1, "codeBtn", "< entity", "&lt;"],
		"greaterThanEntity": [1, "codeBtn", "> entity", "&gt;"],
		
	},
	"JS": {
		"langName": "JS",
		"Core":[0,"group","Core",["Function", "Variable", "Let", "Constant", "IfElse", "SwitchCase"]],
		"Function": [1, "codeBtn", "Function", "function changeMe1(){\r\n	\r\n}"],
		"Variable": [1, "codeBtn", "var variable", "var someVar = 0;"],
		"Let": [1, "codeBtn", "let variable", "let blahblah = 0;"],
		"Constant": [1, "codeBtn", "const constant", "const changeMe1;"],
		"IfElse": [1, "codeBtn", "if else", "if(){\r\n	\r\n} else {\r\n	\r\n}"],
		"SwitchCase": [1, "codeBtn", "switch case", "switch(expression) {\r\n	case x:\r\n		\r\n		break;\r\n	case y:\r\n		\r\n		break;\r\n	default:\r\n	\r\n}"],
		"For": [1, "codeBtn", "For", "for (let i = 0; i < someAmount; i++) {\r\n	\r\n}"],
		"ForKeyInObject": [1, "codeBtn", "ForKeyInObject", "for (keyName in objectName) {\r\n	\r\n}"],
		"Break": [1, "codeBtn", "Break", "break;"],
		"GetElByID": [0, "codeBtn", "getElement ById", "document.getElementById(\"codeBtns\")"],
		"Logging":[0,"group","Logging & Commenting",["ConsoleGroup", "ConsoleLog", "/*Comment*/", "//Comment"]],
		"ConsoleGroup": [1, "codeBtn", "ConsoleGroup", "console.group(\"\");\r\nconsole.groupEnd();"],
		"ConsoleLog": [1, "codeBtn", "ConsoleLog", "console.log();"],
		"/*Comment*/": [1, "codeBtn", "/*Comment*/", "/* Comment */"],
		"//Comment": [1, "codeBtn", "//Comment", "//Comment"],
		"JSONKeyValue": [0, "codeBtn", "JSONKeyValue", "\"key\": \"value\""],
		"JSONKeyObject": [0, "codeBtn", "JSONKeyObject", "\"key\": {\r\n	\r\n	\r\n}"],
		"LocalStorageGrp":[0,"group","Local Storage",["SaveToLocalStorageFunc"]],
		"SaveToLocalStorageFunc":[1,"codeBtn","function: saveToLocalStorage","function saveToLocalStorage(key,value){ \r\n\t/*Returns true if successful, alerts if not*/\r\n\t//Before using web storage, check browser support for Storage (covers both localStorage and sessionStorage)\r\n\tif (typeof(Storage) !== \"undefined\") {\r\n\t//Storage is there, so we'll save it\r\n\t\tlocalStorage.setItem(key, value);\r\n\t\treturn true; //lets us display a relevant success message or carry on doing things\r\n\t} else {//No Web Storage support\r\n\t\t//TODO: is this a good experience??\r\n\t\talert(\"couldn't save, browser doesn't support local storage\");\r\n\t\treturn false;\r\n\t}\r\n}"],
	},
	"CSS": {
		"langName": "CSS",
		"mediaQueriesGrp":[0,"group","Media Queries",["MqMinwidth576px", "MqMinwidth768px", "MqMinwidth992px", "MqMinwidth1200px", "PointerFine"]],
		"MqMinwidth576px": [1, "codeBtn", "screen width 576px", "@media only screen and (min-width: 576px) {\r\n	\r\n}\r\n"],
		"MqMinwidth768px": [1, "codeBtn", "screen width 768px", "@media only screen and (min-width: 768px) {\r\n	\r\n}\r\n"],
		"MqMinwidth992px": [1, "codeBtn", "screen width 992px", "@media only screen and (min-width: 992px) {\r\n	\r\n}\r\n"],
		"MqMinwidth1200px": [1, "codeBtn", "screen width 1200px", "@media only screen and (min-width: 1200px) {\r\n	\r\n}\r\n"],
		"PointerFine":[1,"codeBtn","pointer: fine","@media (pointer: fine) {\r\n	\r\n}\r\n"],
		"SelectorsGrp":[0,"group","Selectors",["P", "Button", "Class", "ClassesAnd", "ClassesOr", "NestedClasses", "ByID", "LiNthChild", "LiOddChild", "LiEvenChild", "LiFormula", "LiLastChild", "All"]],
		"P": [1, "codeBtn", "p", "p {\r\n	\r\n	\r\n}\r\n"],
		"Button": [1, "codeBtn", "button", "button {\r\n	\r\n	\r\n}\r\n"],
		"Class": [1, "codeBtn", ".class", ".className {\r\n	\r\n	\r\n}\r\n"],
		"ClassesAnd": [1, "codeBtn", ".class1.class2 (both)", ".class1.class2 {\r\n	\r\n	\r\n}\r\n"],
		"ClassesOr": [1, "codeBtn", ".class1, .class2 (either)", ".class1, .class2 {\r\n	\r\n	\r\n}\r\n"],
		"NestedClasses": [1, "codeBtn", ".classParent .classChild (nested)", ".classParent .classChild {\r\n	\r\n	\r\n}\r\n"],
		"ByID": [1, "codeBtn", "#ID", "#elementID {\r\n	\r\n	\r\n}\r\n"],
		"LiNthChild":[1,"codeBtn","li:nth-child(2) (2nd li in list)","li:nth-child(2) {\r\n	\r\n}\r\n"],
		"LiOddChild":[1,"codeBtn","li:nth-child(odd) (odd numbered)","li:nth-child(odd) {\r\n	\r\n}\r\n"],
		"LiEvenChild":[1,"codeBtn","li:nth-child(even) (even numbered)","li:nth-child(even) {\r\n	\r\n}\r\n"],
		"LiFormula":[1,"codeBtn","li:nth-child(3n + 1) (by formula)","li:nth-child(3n + 1) {\r\n\t\r\n}\r\n"],
		"LiLastChild":[1,"codeBtn","li:last-child (last li)","li:last-child {\r\n\t\r\n}\r\n"],
		"All":[1,"codeBtn","* (wildcard all)","* {\r\n\t\r\n}\r\n"],
		"ColoursBackgroundsGrp":[0,"group","colours & backgrounds",["BackgroundColour", "BackgroundLinearGradient", "TextColour"]],
		"BackgroundColour": [1, "codeBtn", "background-color", "background-color: DodgerBlue;"],
		"BackgroundLinearGradient":[1,"codeBtn","background-image: linear-gradient","background-image: linear-gradient(to top, green, blue);"],
		"TextColour": [1, "codeBtn", "color (text)", "color: Tomato;"],
		"Comment": [0, "codeBtn", "/*Comment*/", "/* Comment */"],
	},
	"Java": {
		"langName": "🚧Java🚧",
		"infoLine": "",
		"class":[0,"codeBtn","public class MyClass","public class MyClass {\r\n    \r\n\r\n}"],
		"main":[0,"codeBtn","public static void main","public static void main(String... args) {\r\n\t\r\n}"],
		"println":[0,"codeBtn","System.out.println","System.out.println(\"Hello, World!\");"]
	},
	"Ada": {
		"langName": "🚧Ada🚧",
		"infoLine": "(Phil is adding this gradually as he learns this language)",
		"withGrp":[0,"group","with",["withText_IO"]],
		"withText_IO":[1,"codeBtn","with Ada.Text_IO;","with Ada.Text_IO;"],
		"procedure":[0,"codeBtn","procedure","procedure Hello is\r\nbegin\r\n\t\t\r\nend Hello;"],
		"Put_Line":[0,"codeBtn","Put_Line","Put_Line (\"Hello, World!\");"]
	},
	"python": {
		"langName": "🚧python🚧",
		"4Spaces": [0, "codeBtn", "4 spaces", "    "],
		"DefFunction": [0, "codeBtn", "def my_function():", "def my_function():\r\n    "],
		"Print": [0, "codeBtn", "output print()", "print(\"\")"],
		"Class": [0, "codeBtn", "class", "class MyClass"],
		"ArithmeticOperators": [0, "group", "Arithmetic Operators", ["Divide", "Remainder", "FloorDivision", "ToThePowerOf"]],
		"Divide": [1, "codeBtn", "divide", " / "],
		"Remainder": [1, "codeBtn", "remainder", " % "],
		"FloorDivision": [1, "codeBtn", "floor division", " // "],
		"ToThePowerOf": [1, "codeBtn", "to the power of", " ** "],
		"MultilineString": [0, "codeBtn", "\"\"\"Multiline String\"\"\"", "\"\"\"\r\n\r\n\"\"\""],
		"Slice": [0, "codeBtn", "Slice [x:y]", "[x:y]"]
	},
	"php": {
		"langName": "🚧php🚧",
		/* logo uses lowercase php, wheras elsewhere they use PHP */
		"PHPTag":[0,"codeBtn","&lt;?php  ?&gt;","<?php\r\n\r\n?>"],
		"Echo":[0,"codeBtn","echo \"Hello World!\";","echo \"Hello World!\";"],
		"DoubleSlashComment":[0,"codeBtn","//single-line comment","//"],
		"HashComment":[0,"codeBtn","#single-line comment","#"],
		"MultilineComment":[0,"codeBtn","/*Multiline comment*/","/* comment */"],
		"var":[0,"codeBtn","$var","$var_name = '';"],
		/* Having a "Coming Soon" btn allows btncode to have clearly incomplete languages, without looking ridiculous in the meantime. Gives us a way of saying "don't worry, there is more coming*/
		"ComingSoon":[0,"group","🚧 Coming Soon",["Array", "Calendar", "Date", "Directory", "Error"]],
		"Array":[1,"group","Array",[]],
		"Calendar":[1,"group","Calendar",[]],
		"Date":[1,"group","Date",[]],
		"Directory":[1,"group","Directory",[]],
		"Error":[1,"group","Error",[]],
		"🎨": [1, "codeBtn", "🎨", "🎨"],
	},
	"CSharp": {
		"langName": "🚧C#🚧",
		"🚧": [0, "codeBtn", "🚧", "🚧"],
		"HelloWorld":[0,"codeBtn","Console.WriteLine Hello World","Console.WriteLine(\"Hello World!\");"],
	},
	"Emoji": {
		/* because why not?*/
		"langName": "Emoji",
		"🚧": [0, "codeBtn", "🚧", "🚧"],
		"🏗": [0, "codeBtn", "🏗", "🏗"],
		"🆕": [0, "codeBtn", "🆕", "🆕"],
		"✏️": [0, "codeBtn", "✏️", "✏️"],
		"🎨": [0, "codeBtn", "🎨", "🎨"],
		"🔔": [0, "codeBtn", "🔔", "🔔"],
		"🔇": [0, "codeBtn", "🔇", "🔇"],
		"🔈": [0, "codeBtn", "🔈", "🔈"],
		"🔉": [0, "codeBtn", "🔉", "🔉"],
		"🔊": [0, "codeBtn", "🔊", "🔊"],
		"⚙️": [0, "codeBtn", "⚙️", "⚙️"],
		"💾": [0, "codeBtn", "💾", "💾"],
		"😄": [0, "codeBtn", "😄", "😄"],
	},
	"MiscSnippets": {
		"langName": "Misc Snippets",
		"LoremIpsum": [0, "codeBtn", "Lorem Ipsum", "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua."],
		"QuickBrownFox": [0, "codeBtn", "Quick brown fox", "The quick brown fox jumps over the lazy dog."],
		"CharRuler": [0, "codeBtn", "Char ruler", "         1         2         3         4         5         6         7         8         9        10        11        12        13        14        15        16\r\n1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890"],
		"digits": [0, "codeBtn", "digits", "0123456789"],
		"alphabet": [0, "codeBtn", "english alphabet", "abcdefghijklmnopqrstuvwxyz"],
		"ALPHABET": [0, "codeBtn", "english ALPHABET", "ABCDEFGHIJKLMNOPQRSTUVWXYZ"],
	},
	"AddBtnsToMe": {
        "langName": "🚧Add&nbsp;to&nbsp;me🚧"
    },
    "foo": {
        "langName": "foo🚧",
        "barGrp": [0,"group","bar",[]]
    }/*,	

	"MySQL": {
		
	},
	"QBASIC": {
		
	},*/
}